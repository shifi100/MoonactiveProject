{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\Desktop\\\\moon active\\\\Reactjs-Nodejs-MongoDB-CRUD-Example copy\\\\src\\\\PromotionEdit.js\";\nimport React, { Component } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\nimport AppNavbar from './AppNavbar';\n\nclass CustomerEdit extends Component {\n  constructor(props) {\n    super(props);\n    this.emptyPromotion = [];\n    this.state = {\n      item: this.emptyPromotion\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  async componentDidMount() {\n    // need to call get /api/promotion/:id and to put on state\n    if (this.props.match.params.id !== 'new') {\n      const promotion = await (await fetch(`/api/promotiion/:id`)).json();\n      this.setState({\n        item: promotion\n      });\n    }\n  }\n\n  handleChange(event) {\n    const target = event.target;\n    const value = target.value;\n    const name = target.name;\n    let item = { ...this.state.item\n    };\n    item[name] = value;\n    this.setState({\n      item\n    });\n  }\n\n  async handleSubmit(event) {\n    // need to call update /api/promotion\n    await fetch(`/api/promotion/${id}`, {\n      method: 'UPDATE',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      }\n    }).then(() => {\n      console.log(\"U Done!\");\n      let updatedPromotions = [...this.state.promotionsLines].filter(i => i._id !== id);\n      this.setState({\n        promotionsLines: updatedPromotions\n      });\n    });\n    event.preventDefault();\n    const {\n      item\n    } = this.state;\n    await fetch('/api/promotion', {\n      method: item._id ? 'PUT' : 'POST',\n      headers: {\n        'Accept': 'application/json',\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(item)\n    });\n    this.props.history.push('/promotions');\n  }\n\n  render() {\n    const {\n      item\n    } = this.state;\n    const title = /*#__PURE__*/React.createElement(\"h2\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 19\n      }\n    }, item.id ? 'Edit promotion' : 'Add promotion');\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 12\n      }\n    }, /*#__PURE__*/React.createElement(AppNavbar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 7\n      }\n    }), /*#__PURE__*/React.createElement(Container, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 7\n      }\n    }, title, /*#__PURE__*/React.createElement(Form, {\n      onSubmit: this.handleSubmit,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }\n    }, Object.keys(item).map(function (value) {\n      if (value != 'id') {\n        /*#__PURE__*/\n        React.createElement(FormGroup, {\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 19\n          }\n        }, /*#__PURE__*/React.createElement(Label, {\n          for: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 21\n          }\n        }, value), /*#__PURE__*/React.createElement(Input, {\n          type: \"text\",\n          name: value,\n          id: value,\n          value: item[value] || '',\n          onChange: this.handleChange,\n          autoComplete: value,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 85,\n            columnNumber: 21\n          }\n        }));\n      }\n    }), /*#__PURE__*/React.createElement(FormGroup, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 11\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      color: \"primary\",\n      type: \"submit\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 13\n      }\n    }, \"Save\"), ' ', /*#__PURE__*/React.createElement(Button, {\n      color: \"secondary\",\n      tag: Link,\n      to: \"/customers\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 13\n      }\n    }, \"Cancel\")))));\n  }\n\n}\n\nexport default withRouter(CustomerEdit);","map":{"version":3,"sources":["C:/Users/User/Desktop/moon active/Reactjs-Nodejs-MongoDB-CRUD-Example copy/src/PromotionEdit.js"],"names":["React","Component","Link","withRouter","Button","Container","Form","FormGroup","Input","Label","AppNavbar","CustomerEdit","constructor","props","emptyPromotion","state","item","handleChange","bind","handleSubmit","componentDidMount","match","params","id","promotion","fetch","json","setState","event","target","value","name","method","headers","then","console","log","updatedPromotions","promotionsLines","filter","i","_id","preventDefault","body","JSON","stringify","history","push","render","title","Object","keys","map"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\nimport { Button, Container, Form, FormGroup, Input, Label } from 'reactstrap';\r\nimport AppNavbar from './AppNavbar';\r\n\r\nclass CustomerEdit extends Component {\r\n\r\n\r\nemptyPromotion=[];\r\n   \r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      item: this.emptyPromotion\r\n    };\r\n    this.handleChange = this.handleChange.bind(this);\r\n    this.handleSubmit = this.handleSubmit.bind(this);\r\n  }\r\n\r\n  async componentDidMount() {\r\n\r\n\r\n    // need to call get /api/promotion/:id and to put on state\r\n\r\n    if (this.props.match.params.id !== 'new') {\r\n      const promotion = await (await fetch(`/api/promotiion/:id`)).json();\r\n      this.setState({item: promotion});\r\n    }\r\n  }\r\n\r\n  handleChange(event) {\r\n    const target = event.target;\r\n    const value = target.value;\r\n    const name = target.name;\r\n    let item = {...this.state.item};\r\n    item[name] = value;\r\n    this.setState({item});\r\n  }\r\n\r\n  async handleSubmit(event) {\r\n\r\n\r\n    // need to call update /api/promotion\r\n  \r\n        await fetch(`/api/promotion/${id}`, {\r\n          method: 'UPDATE',\r\n          headers: {\r\n            'Accept': 'application/json',\r\n            'Content-Type': 'application/json'\r\n          }\r\n        }).then(() => {\r\n          console.log(\"U Done!\");\r\n          let updatedPromotions = [...this.state.promotionsLines].filter(i => i._id !== id);\r\n          this.setState({promotionsLines: updatedPromotions});\r\n        });\r\n     \r\n    event.preventDefault();\r\n    const {item} = this.state;\r\n\r\n    await fetch('/api/promotion', {\r\n      method: (item._id) ? 'PUT' : 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json'\r\n      },\r\n      body: JSON.stringify(item),\r\n    });\r\n    this.props.history.push('/promotions');\r\n  }\r\n\r\n  render() {\r\n    const {item} = this.state;\r\n    const title = <h2>{item.id ? 'Edit promotion' : 'Add promotion'}</h2>;\r\n\r\n    return <div>\r\n      <AppNavbar/>\r\n      <Container>\r\n        {title}\r\n        <Form onSubmit={this.handleSubmit}>\r\n\r\n         {Object.keys(item).map(function(value) {\r\n                if(value != 'id') {\r\n                  <FormGroup>\r\n                    <Label for={value}>{value}</Label>\r\n                    <Input type=\"text\" name={value} id={value} value={item[value] || ''}\r\n                          onChange={this.handleChange} autoComplete={value}/>\r\n                  </FormGroup>\r\n                }\r\n            })}\r\n          {/* <FormGroup>\r\n            <Label for=\"firstname\">Firstname</Label>\r\n            <Input type=\"text\" name=\"firstname\" id=\"firstname\" value={item.firstname || ''}\r\n                   onChange={this.handleChange} autoComplete=\"firstname\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"lastname\">Lastname</Label>\r\n            <Input type=\"text\" name=\"lastname\" id=\"lastname\" value={item.lastname || ''}\r\n                   onChange={this.handleChange} autoComplete=\"lastname\"/>\r\n          </FormGroup>          \r\n          <FormGroup>\r\n            <Label for=\"age\">Age</Label>\r\n            <Input type=\"text\" name=\"age\" id=\"age\" value={item.age || ''}\r\n                   onChange={this.handleChange} autoComplete=\"age\"/>\r\n          </FormGroup>\r\n          <FormGroup>\r\n            <Label for=\"address\">Address</Label>\r\n            <Input type=\"text\" name=\"address\" id=\"address\" value={item.address || ''}\r\n                   onChange={this.handleChange} autoComplete=\"address\"/>\r\n          </FormGroup> */}\r\n          <FormGroup>\r\n            <Button color=\"primary\" type=\"submit\">Save</Button>{' '}\r\n            <Button color=\"secondary\" tag={Link} to=\"/customers\">Cancel</Button>\r\n          </FormGroup>\r\n        </Form>\r\n      </Container>\r\n    </div>\r\n  }\r\n}\r\n\r\nexport default withRouter(CustomerEdit);"]},"metadata":{},"sourceType":"module"}